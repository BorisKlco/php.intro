Querying:
----------------------------------------
SELECT
LIMIT
WHERE  NOT =, !=, <>, 
AND, OR, XOR, ( )
WHERE x IS NULL, IS NOT NULL
x LIKE '%something%'
x LIKE '%_omething%'
range <, >, <= ,>=
BETWEEN x AND y
ORDER BY x ASC, DESC
--------------------
-Aggregate Functions:
COUNT, AVG, MIN, MAX, SUM, DISTINCT
SELECT AVG(x) FROM y --> ROUND(AVG(), 2)  
SELECT x AS "custom name"
COUNT(*) = count rows
----------------------------------------
Relationship:
--------------------
One to one
One to many
Many to many
-Entity Relationship Diagrams(ET Diagram):
https://imgur.com/cSFnFA6
--------------------
Subqueries:
SELECT "title" FROM "books"
WHERE "publisher_id" = (
      SELECT "id" FROM "publishers"
      WHERE "puublisher" = "Name"
);
IN (in set, more, range): 
SELECT "title" FROM "books" WHERE "id" IN (
    SELECT "book_id" FROM "authored"
    WHERE "author_id" = (
        SELECT "id" FROM "authors" WHERE "name" = "name"
     )
):
--------------------
INNER,LEFT,RIGHT,FULL, NATURAL JOIN
SELECT * FROM "sea_lions"
LEFT JOIN "migrations" ON "migrations"."id" = "sea_lions"."id";
--------------------
SETS:
A INTERSECT B / A∩B={x∣x∈A and x∈B}
A UNION B / A∪B={x∣x∈A or x∈B}
A EXCEPT B / A−B={x∣x∈A and x∉B}
--------------------
GROUPS:
SELECT "book_id", AVG("rating") AS "avg_rating"
FROM "ratings"
GROUP BY "book_id";
HAVING "average rating" > 4.0 (having = where for groups)
ORDER BY "avg_rating" DESC;
----------------------------------------
Designing: 
--------------------
.schema
-Normalizing
DROP TABLE x;
CREATE TABLE "riders" (
    "id" INTEGER, 
    "name" TEXT
);
CREATE TABLE "stations" (
    "id INTEGER",
    "name" TEXT,
    "line" TEXT
);
CREATE TABLE "visits" (
    "rider_id" INTEGER,
    "station_id" INTEGER
);
Storage Classes:
NULL, INTEGER, REAL, TEXT, BLOB
Data Types:
Type Affinities:
TEXT, NUMERIC, INTEGER, REAL, BLOB
--------------------
Table Constraints:
PRIMARY KEY, FOREIGN KEY, REFERENCES
CREATE TABLE "visits" (
    "id" INTEGER,
    "rider_id" INTEGER,
    "station_id" INTEGER,
    PRIMARY KEY("id"),
    FOREIGN KEY("raider_id") REFERENCES "riders"("id"),
    FOREIGN KEY("station_id") REFERENCES "stations"("id")
);
--------------------
Column Constraints:
CHECK(x != 0), DEFAULT, NOT NULL, UNIQUE
CREATE TABLE "stations" (
    "id INTEGER",
    "name" TEXT NOT NULL UNIQUE,
    "line" TEXT NOT NULL
);
--------------------
Altering Tables:
ALTER TABLE x
    ADD COLUMN ...
    RENAME COLUMN ... TO ...
    DROP COLUMN ...
----------------------------------------
Writing: 
--------------------
INSERT INTO table (column, ...)
VALUES
(value0, ...);
DELETE FROM x WHERE y IS NULL;
FOREIGN KEY("some_id") REFERENCES "something"("id")
Foreign key Constraints:
ON DELETE SET NULL
ON DELETE SET DEFAULT
ON DELETE CASCADE (delete on id deletation)
Update:
--------------------
UPDATE tableSET col0 = val, ...
WHERE condition;
UPDATE "created" SET "artist_id" = (
    SELECT "id" FROM "artists"
    WHERE "name" = 'Artist Name'
)
WHERE "collection_id" = (
    SELECT "id" from "collections"
    WHERE "title" = 'song name'
);
Triggers:
--------------------
CREATE TRIGGER name
AFTER/BEFORE INSERT/UPDATE OF column/DELETE ON table
FOR EACH ROW
BEGIN
...;
END;
CREATE TRIGGER "sell"
BEGORE DELETE ON "collections"
FOR EACH ROW
BEGIN
    INSERT INTO "transactions" ("title", "action")
    VALUES (OLD."title", 'sold');
END;
----------------------------------------
Viewing: 
-------------------- 
Simplifying, Aggregating, Paritioning, Securing
-------------------- 
Simplifying:
CREATE VIEW name AS
SELECT ...;

CREATE VIEW "longlist" AS
SELECT "name", "title" FROM "authors"
JOIN "authors" ON "authors"."id" = "authored"."author_id"
JOIN "books" ON "books"."id" = "authored"."book_id";
-------------------- 
Aggregating:
CREATE VIEW "avrg_book_ratings" AS
SELECT "book_id", "title", "year", ROUND(AVG("rating"), 2) AS "rating"
FROM "ratings"
JOIN "books" ON "ratings"."book_id" = "books"."id"
GROUP BY "book_id";
-------------------- 
Temporary Views:
CREATE TEMPORARY VIEW "name" AS
SELECT "year", ROUND(AVG("rating"), 2) AS "rating" FROM "avrg_book_ratings"
GROUP BY "year";
-------------------- 
CTE - Common Table Expression:
WITH name AS (
  SELECT ...
), ... 
SELECT ... FROM name;

WITH "avrg_book_ratings" AS (
  SELECT "book_id", "title", "year", ROUND(AVG("rating"), 2) AS "rating"
  FROM "ratings"
  JOIN "books" ON "ratings"."book_id" = "books"."id"
  GROUP BY "book_id"
)
SELECT "year", ROUND(AVG("rating"), 2) AS "rating"
FROM "avrg_book_ratings"
GROUP BY "year";
-------------------- 
Paritioning:
CREATE VIEW "2022" AS
SELECT "id", "title" FROM "books"
WHERE "year" = 2022;
-------------------- 
Securing:
CREATE VIEW "view" AS
SELECT "id", "origin", "destination", 'Anon' AS "rider"
FROM "riders";
-------------------- 
Triggers with Views:
CREATE TRIGGER name
INSTEAD OF DELETE ON view
FOR EACH ROW
BEGIN
  ...;
END;

CREATE TRIGGER "insert_when_exist"
INSTED OF INSERT ON "current_collections"
FOR EACH ROW
WHEN NEW."accession_num" IN (
  SELECT "accession_num" FROM "collections"
)
BEGIN
  UPDATE "collections" SET "deleted" = 0
  WHERE "accession_num" = NEW."accession_num";
END;
----------------------------------------
Optimizing: 
-------------------- 
CREATE INDEX "title_idndex" ON "movies" ("title");

EXPLAIN QUERY PLAN
SELECT * FROM "movies" WHERE "title" = 'Cars';
Partial Index
-------------------- 
CREATE INDEX name
ON table (col0,..)
WHERE condition;
-------------------- 
Vacuum
-------------------- 
Concurrency:
Transaction, ACID
BEGIN TRANSACTION;
...
COMMIT/ROLLBACK;
-------------------- 
Lock: UNLOCKED, SHARED, EXCLUSIVE
BEGIN EXCLUSIVE TRANSACTION;
----------------------------------------
Scaling: 
-------------------- 
MySQL, PostgreSQL
MySQL:
SHOW DATABASES;
CREATE DATABASE `mbta`;
USE `mbta`;

CREATE TABLE `cards` (
  `id` INT AUTO_INCREMENT,
  PRIMARY KEY (`id`)
);

SHOW TABLES;

DESCRIBE `cards`;

CREATE TABLE `stations` (
  `id` INT AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL UNIQUE,
  `line` ENUM('blue','green','orange','red') NOT NULL,
  PRIMARY KEY(`id`)
);

CREATE TABLE `swipes` (
  `id` INT AUTO_INCREMENT,
  `card_id` INT,
  `station_id` INT,
  `type` ENUM('enter','exit','deposit') NOT NULL,
  `datetime` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `amount` DECIMAL(5,2) NOT NULL CHECK(`amount` != 0),
  PRIMARY KEY(`id`),
  FOREIGN KEY(`card_id`) REFERENCES `cards`(`id`),
  FOREIGN KEY(`station_id`) REFERENCES `stations`(`id`)
);

ALTER TABLE `stations`
MODIFY `line` ENUM('blue,'green','orange','red','silver') NOT NULL;